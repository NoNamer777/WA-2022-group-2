openapi: 3.0.3
info:
  title: Wasted API - OpenAPI 3.0
  description: API specification document of the Wasted API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
security:
  - bearerAuth: [] 

paths:
  /user:
    get:
      tags:
        - Users
      summary: Returns a list of users.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Users
      summary: Creates a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'
  /user/{userId}:
    parameters:
      - in: path
        name: userId
        description: User ID
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags:
        - Users
      summary: Returns a user based on ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put:
      tags:
        - Users
      summary: Modifies an existing user based on ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Users
      summary: Deletes the specified user.
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
        
  /user/{userId}/challenge:
    parameters:
      - in: path
        name: userId
        description: User ID
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags:
        - Challenge
      summary: Returns a list of user's challenges.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challenge'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Challenge
      summary: Creates a challenge for the user and selected participants.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Challenge'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /challenge/{challengeId}:
    parameters:
      - in: path
        name: challengeId
        description: Challenge ID
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags:
        - Challenge
      summary: Returns a list of challenge participant information based on challenge ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserChallenge'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    put: 
      tags:
        - Challenge
      summary: Modifies an existing challenge based on challenge ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Challenge'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Challenge'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /userchallenge/{userChallengeId}:
    parameters:
      - in: path
        name: userChallengeId
        description: userChallengeId ID
        required: true
        schema:
          type: integer
          example: 1
    put:
      tags:
        - Challenge Progress
      summary: Modifies a user's challenge completion status based on userchallenge ID.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserChallenge'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserChallenge'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      tags:
        - Challenge
      summary: Removes a user from a challenge based on userchallenge ID.
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  
  /challenge/{challengeId}/day:
    parameters:
      - in: path
        name: challengeId
        description: Challenge ID
        required: true
        schema:
          type: integer
          example: 1
    get:
      tags:
        - Challenge Progress
      summary: Returns a list of challenge days based on challenge ID.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChallengeDay'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
          
  /day/{dayId}:
    parameters:
      - in: path
        name: dayId
        description: Day ID
        required: true
        schema:
          type: integer
          example: 1     
    put:
      tags:
        - Challenge Progress
      summary: Modifies the progress status of a challenge day.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChallengeDay'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChallengeDay'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
          
  /user/{userId}/groupmember:
    parameters:
      - in: path
        name: userId
        description: User ID
        required: true
        schema:
          type: integer
          example: 1     
    get:
      tags:
        - Groups
      summary: Returns a list of user's group members.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
          
  /user/{userId}/group:
    parameters:
      - in: path
        name: userId
        description: User ID
        required: true
        schema:
          type: integer
          example: 1     
    get:
      tags:
        - Groups
      summary: Returns a list of user's groups.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Groups
      summary: Creates a group for the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
          
  /group/{groupId}/member/:
    parameters:
      - in: path
        name: groupId
        description: Group ID
        required: true
        schema:
          type: integer
          example: 1     
    get:
      tags:
        - Groups
      summary: Returns a list of group's members.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
          
  /group/{groupId}/member/{userId}:
    parameters:
      - in: path
        name: groupId
        description: Group ID
        required: true
        schema:
          type: integer
          example: 1     
      - in: path
        name: userId
        description: User ID
        required: true
        schema:
          type: integer
          example: 1     
    post:
      tags:
        - Groups
      summary: Adds a member to a group.
      responses:
        '200':
          description: Success
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    

components:
  securitySchemes:
    bearerAuth:           
      type: http
      scheme: bearer
      bearerFormat: JWT   
  schemas:
    User:
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        username:
          type: string
          example: wasteduser
        email:
          type: string
          format: email
          example: wasteduser@email.com
        password:
          type: string
          format: password
          writeOnly: true
          example: super secret password
        profile_image:
          type: string
          example: zebra
      required: 
        - id
        - username
        - email
        - password
    Challenge:
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name:
          type: string
          example: Zelfgemaakte lunch naar school
        startDate:
          type: string
          format: date
        amountOfDays: 
          type: integer
          example: 5
        userIds:
          type: array
          items:
            type: integer
            example: 2, 3
      required:
        - id
        - name
        - startDate
        - amountOfDays
    UserChallenge:
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        username: 
          type: string
          example: wasteduser
        completed: 
          type: boolean
          example: false
      required:
        - id
        - username
        - completed
    ChallengeDay:
      properties:
        id: 
          type: integer
          readOnly: true
          example: 1
        dayNumber:
          type: integer
          example: 1
        earned:
          type: boolean
          example: true
      required:
        - id
        - dayNumber
        - earned
    Group:
      properties:
        id:
          type: integer
          readOnly: true
          example: 1
        name: 
          type: string
          example: my awesome family group
        groupCode:
          type: string
          readOnly: true
          example: X1779Y
      required:
        - id
        - name
        - groupCode
    Error:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        status:
          type: integer
          example: Status code to return
        error:
          type: string
          example: Error description
        message:
          type: string
          example: Additional information on the error
      required:
        - timestamp
        - status
        - error
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
